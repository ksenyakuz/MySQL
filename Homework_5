CREATE DATABASE shop;

USE shop;

# Операторы, фильтрация, сортировка и ограничение
# Задание 1

DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) COMMENT 'Имя покупателя',
  birthday_at DATE COMMENT 'Дата рождения',
  created_at DATETIME,
  updated_at DATETIME
) COMMENT = 'Покупатели';

INSERT INTO users (name, birthday_at) VALUES
  ('Геннадий', '1990-10-05'),
  ('Наталья', '1984-11-12'),
  ('Александр', '1985-05-20'),
  ('Сергей', '1988-02-14'),
  ('Иван', '1998-01-12'),
  ('Мария', '1992-08-29');


# Решение

UPDATE users
SET
  created_at = NOW(),
  updated_at = NOW()
; 


# Задание 2

DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) COMMENT 'Имя покупателя',
  birthday_at DATE COMMENT 'Дата рождения',
  created_at VARCHAR(255),
  updated_at VARCHAR(255)
) COMMENT = 'Покупатели';

INSERT INTO users (name, birthday_at, created_at, updated_at) 
VALUES
  ('Геннадий', '1990-10-05', '09.03.2022 10:30', '10.03.2022 10:30'),
  ('Наталья', '1984-11-12', '09.03.2022 10:31', '10.03.2022 10:31'),
  ('Александр', '1985-05-20', '09.03.2022 10:32', '10.03.2022 10:32'),
  ('Сергей', '1988-02-14', '09.03.2022 10:33', '10.03.2022 10:33'),
  ('Иван', '1998-01-12', '09.03.2022 10:34', '10.03.2022 10:34'),
  ('Мария', '1992-08-29', '09.03.2022 10:35', '10.03.2022 10:35');
 
 
# Решение
 
ALTER TABLE users 
  ADD created_at_new DATETIME DEFAULT NOW(),
  ADD updated_at_new DATETIME
;

UPDATE users
SET 
	created_at_new = STR_TO_DATE(created_at, '%d.%m.%Y %k:%i'),
    updated_at_new = STR_TO_DATE(updated_at, '%d.%m.%Y %k:%i')
; 

ALTER TABLE users 
    DROP created_at, 
    DROP updated_at, 
    RENAME COLUMN created_at_new TO created_at, 
    RENAME COLUMN updated_at_new TO updated_at
;
 

# Задание 3

DROP TABLE IF EXISTS storehouses_products;
CREATE TABLE storehouses_products (
  id SERIAL PRIMARY KEY,
  storehouse_id INT UNSIGNED,
  product_id INT UNSIGNED,
  value INT UNSIGNED COMMENT 'Запас товарной позиции на складе',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'Запасы на складе';


# Решение

INSERT INTO storehouses_products (storehouse_id, product_id, value) VALUES
	(1, 1, 0),
    (1, 2, 4),
    (1, 3, 0),
    (2, 4, 7),
    (2, 5, 56),
    (1, 6, 0),
    (1, 7, 4);

SELECT 
	*
FROM 
	storehouses_products 
ORDER BY 
	IF(value > 0, 0, 1), value;


# Агрегация данных
# Задание 1

DROP TABLE IF EXISTS users;
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) COMMENT 'Имя покупателя',
  birthday_at DATE COMMENT 'Дата рождения',
  created_at VARCHAR(255),
  updated_at VARCHAR(255)
) COMMENT = 'Покупатели';

INSERT INTO users (name, birthday_at, created_at, updated_at) 
VALUES
  ('Геннадий', '1990-10-05', '09.03.2022 10:30', '10.03.2022 10:30'),
  ('Наталья', '1984-11-12', '09.03.2022 10:31', '10.03.2022 10:31'),
  ('Александр', '1985-05-20', '09.03.2022 10:32', '10.03.2022 10:32'),
  ('Сергей', '1988-02-14', '09.03.2022 10:33', '10.03.2022 10:33'),
  ('Иван', '1998-01-12', '09.03.2022 10:34', '10.03.2022 10:34'),
  ('Мария', '1992-08-29', '09.03.2022 10:35', '10.03.2022 10:35');


# Решение

SELECT 
	name,
	FLOOR((TO_DAYS(NOW()) - TO_DAYS(birthday_at)) / 365.25) AS age
FROM  
	users
;


# Задание 2
# Решение

SELECT 
    WEEKDAY(DATE_FORMAT(birthday_at, '2021-%m-%d')) AS 'day_number',
    COUNT(*) AS 'birthdays'
FROM users
GROUP BY WEEKDAY(DATE_FORMAT(birthday_at, '2021-%m-%d'))
ORDER BY day_number
;
